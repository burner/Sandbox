/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module lua_module_im;
static import core.stdc.config;

static import std.conv;

static import std.conv;
static import std.string;


private {
  version(linux) {
    version = Nix;
  } else version(darwin) {
    version = Nix;
  } else version(OSX) {
    version = Nix;
  } else version(FreeBSD) {
    version = Nix;
    version = freebsd;
  } else version(freebsd) {
    version = Nix;
  } else version(Unix) {
    version = Nix;
  } else version(Posix) {
    version = Nix;
  }

  version(Tango) {
    static import tango.stdc.string;
    static import tango.stdc.stringz;

    version (PhobosCompatibility) {
    } else {
      alias char[] string;
      alias wchar[] wstring;
      alias dchar[] dstring;
    }
  } else {
    version(D_Version2) {
      static import std.conv;
    }
    static import std.string;
    static import std.c.string;
  }

  version(D_Version2) {
    mixin("alias const(char)* CCPTR;");
  } else {
    alias char* CCPTR;
  }

  CCPTR swigToCString(string str) {
    version(Tango) {
      return tango.stdc.stringz.toStringz(str);
    } else {
      return std.string.toStringz(str);
    }
  }

  string swigToDString(CCPTR cstr) {
    version(Tango) {
      return tango.stdc.stringz.fromStringz(cstr);
    } else {
      version(D_Version2) {
        mixin("return std.conv.to!string(cstr);");
      } else {
        return std.c.string.toString(cstr);
      }
    }
  }
}

class SwigSwigSharedLibLoadException : Exception {
  this(in string[] libNames, in string[] reasons) {
    string msg = "Failed to load one or more shared libraries:";
    foreach(i, n; libNames) {
      msg ~= "\n\t" ~ n ~ " - ";
      if(i < reasons.length)
        msg ~= reasons[i];
      else
        msg ~= "Unknown";
    }
    super(msg);
  }
}

class SwigSymbolLoadException : Exception {
  this(string SwigSharedLibName, string symbolName) {
    super("Failed to load symbol " ~ symbolName ~ " from shared library " ~ SwigSharedLibName);
    _symbolName = symbolName;
  }

  string symbolName() {
    return _symbolName;
  }

private:
  string _symbolName;
}

private {
  version(Nix) {
    version(freebsd) {
      // the dl* functions are in libc on FreeBSD
    }
    else {
      pragma(lib, "dl");
    }

    version(Tango) {
      import tango.sys.Common;
    } else version(linux) {
      import std.c.linux.linux;
    } else {
      extern(C) {
        const RTLD_NOW = 2;

        void *dlopen(CCPTR file, int mode);
        int dlclose(void* handle);
        void *dlsym(void* handle, CCPTR name);
        CCPTR dlerror();
      }
    }

    alias void* SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return dlopen(swigToCString(libName), RTLD_NOW);
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      dlclose(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return dlsym(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      CCPTR err = dlerror();
      if (err is null) {
        return "Unknown Error";
      }
      return swigToDString(err);
    }
  } else version(Windows) {
    alias ushort WORD;
    alias uint DWORD;
    alias CCPTR LPCSTR;
    alias void* HMODULE;
    alias void* HLOCAL;
    alias int function() FARPROC;
    struct VA_LIST {}

    extern (Windows) {
      HMODULE LoadLibraryA(LPCSTR);
      FARPROC GetProcAddress(HMODULE, LPCSTR);
      void FreeLibrary(HMODULE);
      DWORD GetLastError();
      DWORD FormatMessageA(DWORD, in void*, DWORD, DWORD, LPCSTR, DWORD, VA_LIST*);
      HLOCAL LocalFree(HLOCAL);
    }

    DWORD MAKELANGID(WORD p, WORD s) {
      return (((cast(WORD)s) << 10) | cast(WORD)p);
    }

    enum {
      LANG_NEUTRAL                    = 0,
      SUBLANG_DEFAULT                 = 1,
      FORMAT_MESSAGE_ALLOCATE_BUFFER  = 256,
      FORMAT_MESSAGE_IGNORE_INSERTS   = 512,
      FORMAT_MESSAGE_FROM_SYSTEM      = 4096
    }

    alias HMODULE SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return LoadLibraryA(swigToCString(libName));
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      FreeLibrary(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return GetProcAddress(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      DWORD errcode = GetLastError();

      LPCSTR msgBuf;
      DWORD i = FormatMessageA(
        FORMAT_MESSAGE_ALLOCATE_BUFFER |
        FORMAT_MESSAGE_FROM_SYSTEM |
        FORMAT_MESSAGE_IGNORE_INSERTS,
        null,
        errcode,
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        cast(LPCSTR)&msgBuf,
        0,
        null);

      string text = swigToDString(msgBuf);
      LocalFree(cast(HLOCAL)msgBuf);

      if (i >= 2) {
        i -= 2;
      }
      return text[0 .. i];
    }
  } else {
    static assert(0, "Operating system not supported by the wrapper loading code.");
  }

  final class SwigSharedLib {
    void load(string[] names) {
      if (_hlib !is null) return;

      string[] failedLibs;
      string[] reasons;

      foreach(n; names) {
        _hlib = swigLoadSharedLib(n);
        if (_hlib is null) {
          failedLibs ~= n;
          reasons ~= swigGetErrorStr();
          continue;
        }
        _name = n;
        break;
      }

      if (_hlib is null) {
        throw new SwigSwigSharedLibLoadException(failedLibs, reasons);
      }
    }

    void* loadSymbol(string symbolName, bool doThrow = true) {
      void* sym = swigGetSymbol(_hlib, symbolName);
      if(doThrow && (sym is null)) {
        throw new SwigSymbolLoadException(_name, symbolName);
      }
      return sym;
    }

    void unload() {
      if(_hlib !is null) {
        swigUnloadSharedLib(_hlib);
        _hlib = null;
      }
    }

  private:
    string _name;
    SwigSharedLibHandle _hlib;
  }
}

static this() {
  string[] possibleFileNames;
  version (Posix) {
    version (OSX) {
      possibleFileNames ~= ["liblua_module_wrap.dylib", "liblua_module_wrap.bundle"];
    }
    possibleFileNames ~= ["liblua_module_wrap.so"];
  } else version (Windows) {
    possibleFileNames ~= ["lua_module_wrap.dll", "liblua_module_wrap.so"];
  } else {
    static assert(false, "Operating system not supported by the wrapper loading code.");
  }

  auto library = new SwigSharedLib;
  library.load(possibleFileNames);

  string bindCode(string functionPointer, string symbol) {
    return functionPointer ~ " = cast(typeof(" ~ functionPointer ~
      "))library.loadSymbol(`" ~ symbol ~ "`);";
  }

  //#if !defined(SWIG_D_NO_EXCEPTION_HELPER)
  mixin(bindCode("swigRegisterExceptionCallbackslua_module", "SWIGRegisterExceptionCallbacks_lua_module"));
  //#endif // SWIG_D_NO_EXCEPTION_HELPER
  //#if !defined(SWIG_D_NO_STRING_HELPER)
  mixin(bindCode("swigRegisterStringCallbacklua_module", "SWIGRegisterStringCallback_lua_module"));
  //#endif // SWIG_D_NO_STRING_HELPER
  
  mixin(bindCode("LUA_ROOT_get", "D_LUA_ROOT_get"));
  mixin(bindCode("LUA_DIRSEP_get", "D_LUA_DIRSEP_get"));
  mixin(bindCode("LUA_ENV_get", "D_LUA_ENV_get"));
  mixin(bindCode("LUA_QS_get", "D_LUA_QS_get"));
  mixin(bindCode("LUA_IDSIZE_get", "D_LUA_IDSIZE_get"));
  mixin(bindCode("LUAI_MAXSHORTLEN_get", "D_LUAI_MAXSHORTLEN_get"));
  mixin(bindCode("LUAI_BITSINT_get", "D_LUAI_BITSINT_get"));
  mixin(bindCode("LUAI_MAXSTACK_get", "D_LUAI_MAXSTACK_get"));
  mixin(bindCode("LUAI_FIRSTPSEUDOIDX_get", "D_LUAI_FIRSTPSEUDOIDX_get"));
  mixin(bindCode("LUA_NUMBER_SCAN_get", "D_LUA_NUMBER_SCAN_get"));
  mixin(bindCode("LUA_NUMBER_FMT_get", "D_LUA_NUMBER_FMT_get"));
  mixin(bindCode("LUAI_MAXNUMBER2STR_get", "D_LUAI_MAXNUMBER2STR_get"));
  mixin(bindCode("LUA_VERSION_MAJOR_get", "D_LUA_VERSION_MAJOR_get"));
  mixin(bindCode("LUA_VERSION_MINOR_get", "D_LUA_VERSION_MINOR_get"));
  mixin(bindCode("LUA_VERSION_NUM_get", "D_LUA_VERSION_NUM_get"));
  mixin(bindCode("LUA_VERSION_RELEASE_get", "D_LUA_VERSION_RELEASE_get"));
  mixin(bindCode("LUA_VERSION_get", "D_LUA_VERSION_get"));
  mixin(bindCode("LUA_RELEASE_get", "D_LUA_RELEASE_get"));
  mixin(bindCode("LUA_COPYRIGHT_get", "D_LUA_COPYRIGHT_get"));
  mixin(bindCode("LUA_AUTHORS_get", "D_LUA_AUTHORS_get"));
  mixin(bindCode("LUA_SIGNATURE_get", "D_LUA_SIGNATURE_get"));
  mixin(bindCode("LUA_MULTRET_get", "D_LUA_MULTRET_get"));
  mixin(bindCode("LUA_REGISTRYINDEX_get", "D_LUA_REGISTRYINDEX_get"));
  mixin(bindCode("LUA_OK_get", "D_LUA_OK_get"));
  mixin(bindCode("LUA_YIELD_get", "D_LUA_YIELD_get"));
  mixin(bindCode("LUA_ERRRUN_get", "D_LUA_ERRRUN_get"));
  mixin(bindCode("LUA_ERRSYNTAX_get", "D_LUA_ERRSYNTAX_get"));
  mixin(bindCode("LUA_ERRMEM_get", "D_LUA_ERRMEM_get"));
  mixin(bindCode("LUA_ERRGCMM_get", "D_LUA_ERRGCMM_get"));
  mixin(bindCode("LUA_ERRERR_get", "D_LUA_ERRERR_get"));
  mixin(bindCode("LUA_TNONE_get", "D_LUA_TNONE_get"));
  mixin(bindCode("LUA_TNIL_get", "D_LUA_TNIL_get"));
  mixin(bindCode("LUA_TBOOLEAN_get", "D_LUA_TBOOLEAN_get"));
  mixin(bindCode("LUA_TLIGHTUSERDATA_get", "D_LUA_TLIGHTUSERDATA_get"));
  mixin(bindCode("LUA_TNUMBER_get", "D_LUA_TNUMBER_get"));
  mixin(bindCode("LUA_TSTRING_get", "D_LUA_TSTRING_get"));
  mixin(bindCode("LUA_TTABLE_get", "D_LUA_TTABLE_get"));
  mixin(bindCode("LUA_TFUNCTION_get", "D_LUA_TFUNCTION_get"));
  mixin(bindCode("LUA_TUSERDATA_get", "D_LUA_TUSERDATA_get"));
  mixin(bindCode("LUA_TTHREAD_get", "D_LUA_TTHREAD_get"));
  mixin(bindCode("LUA_NUMTAGS_get", "D_LUA_NUMTAGS_get"));
  mixin(bindCode("LUA_MINSTACK_get", "D_LUA_MINSTACK_get"));
  mixin(bindCode("LUA_RIDX_MAINTHREAD_get", "D_LUA_RIDX_MAINTHREAD_get"));
  mixin(bindCode("LUA_RIDX_GLOBALS_get", "D_LUA_RIDX_GLOBALS_get"));
  mixin(bindCode("LUA_RIDX_LAST_get", "D_LUA_RIDX_LAST_get"));
  mixin(bindCode("lua_ident_get", "D_lua_ident_get"));
  mixin(bindCode("lua_newstate", "D_lua_newstate"));
  mixin(bindCode("lua_close", "D_lua_close"));
  mixin(bindCode("lua_newthread", "D_lua_newthread"));
  mixin(bindCode("lua_atpanic", "D_lua_atpanic"));
  mixin(bindCode("lua_version", "D_lua_version"));
  mixin(bindCode("lua_absindex", "D_lua_absindex"));
  mixin(bindCode("lua_gettop", "D_lua_gettop"));
  mixin(bindCode("lua_settop", "D_lua_settop"));
  mixin(bindCode("lua_pushvalue", "D_lua_pushvalue"));
  mixin(bindCode("lua_remove", "D_lua_remove"));
  mixin(bindCode("lua_insert", "D_lua_insert"));
  mixin(bindCode("lua_replace", "D_lua_replace"));
  mixin(bindCode("lua_copy", "D_lua_copy"));
  mixin(bindCode("lua_checkstack", "D_lua_checkstack"));
  mixin(bindCode("lua_xmove", "D_lua_xmove"));
  mixin(bindCode("lua_isnumber", "D_lua_isnumber"));
  mixin(bindCode("lua_isstring", "D_lua_isstring"));
  mixin(bindCode("lua_iscfunction", "D_lua_iscfunction"));
  mixin(bindCode("lua_isuserdata", "D_lua_isuserdata"));
  mixin(bindCode("lua_type", "D_lua_type"));
  mixin(bindCode("lua_typename", "D_lua_typename"));
  mixin(bindCode("lua_tonumberx", "D_lua_tonumberx"));
  mixin(bindCode("lua_tointegerx", "D_lua_tointegerx"));
  mixin(bindCode("lua_tounsignedx", "D_lua_tounsignedx"));
  mixin(bindCode("lua_toboolean", "D_lua_toboolean"));
  mixin(bindCode("lua_tolstring", "D_lua_tolstring"));
  mixin(bindCode("lua_rawlen", "D_lua_rawlen"));
  mixin(bindCode("lua_tocfunction", "D_lua_tocfunction"));
  mixin(bindCode("lua_touserdata", "D_lua_touserdata"));
  mixin(bindCode("lua_tothread", "D_lua_tothread"));
  mixin(bindCode("lua_topointer", "D_lua_topointer"));
  mixin(bindCode("LUA_OPADD_get", "D_LUA_OPADD_get"));
  mixin(bindCode("LUA_OPSUB_get", "D_LUA_OPSUB_get"));
  mixin(bindCode("LUA_OPMUL_get", "D_LUA_OPMUL_get"));
  mixin(bindCode("LUA_OPDIV_get", "D_LUA_OPDIV_get"));
  mixin(bindCode("LUA_OPMOD_get", "D_LUA_OPMOD_get"));
  mixin(bindCode("LUA_OPPOW_get", "D_LUA_OPPOW_get"));
  mixin(bindCode("LUA_OPUNM_get", "D_LUA_OPUNM_get"));
  mixin(bindCode("lua_arith", "D_lua_arith"));
  mixin(bindCode("LUA_OPEQ_get", "D_LUA_OPEQ_get"));
  mixin(bindCode("LUA_OPLT_get", "D_LUA_OPLT_get"));
  mixin(bindCode("LUA_OPLE_get", "D_LUA_OPLE_get"));
  mixin(bindCode("lua_rawequal", "D_lua_rawequal"));
  mixin(bindCode("lua_compare", "D_lua_compare"));
  mixin(bindCode("lua_pushnil", "D_lua_pushnil"));
  mixin(bindCode("lua_pushnumber", "D_lua_pushnumber"));
  mixin(bindCode("lua_pushinteger", "D_lua_pushinteger"));
  mixin(bindCode("lua_pushunsigned", "D_lua_pushunsigned"));
  mixin(bindCode("lua_pushlstring", "D_lua_pushlstring"));
  mixin(bindCode("lua_pushstring", "D_lua_pushstring"));
  mixin(bindCode("lua_pushvfstring", "D_lua_pushvfstring"));
  mixin(bindCode("lua_pushfstring", "D_lua_pushfstring"));
  mixin(bindCode("lua_pushcclosure", "D_lua_pushcclosure"));
  mixin(bindCode("lua_pushboolean", "D_lua_pushboolean"));
  mixin(bindCode("lua_pushlightuserdata", "D_lua_pushlightuserdata"));
  mixin(bindCode("lua_pushthread", "D_lua_pushthread"));
  mixin(bindCode("lua_getglobal", "D_lua_getglobal"));
  mixin(bindCode("lua_gettable", "D_lua_gettable"));
  mixin(bindCode("lua_getfield", "D_lua_getfield"));
  mixin(bindCode("lua_rawget", "D_lua_rawget"));
  mixin(bindCode("lua_rawgeti", "D_lua_rawgeti"));
  mixin(bindCode("lua_rawgetp", "D_lua_rawgetp"));
  mixin(bindCode("lua_createtable", "D_lua_createtable"));
  mixin(bindCode("lua_newuserdata", "D_lua_newuserdata"));
  mixin(bindCode("lua_getmetatable", "D_lua_getmetatable"));
  mixin(bindCode("lua_getuservalue", "D_lua_getuservalue"));
  mixin(bindCode("lua_setglobal", "D_lua_setglobal"));
  mixin(bindCode("lua_settable", "D_lua_settable"));
  mixin(bindCode("lua_setfield", "D_lua_setfield"));
  mixin(bindCode("lua_rawset", "D_lua_rawset"));
  mixin(bindCode("lua_rawseti", "D_lua_rawseti"));
  mixin(bindCode("lua_rawsetp", "D_lua_rawsetp"));
  mixin(bindCode("lua_setmetatable", "D_lua_setmetatable"));
  mixin(bindCode("lua_setuservalue", "D_lua_setuservalue"));
  mixin(bindCode("lua_callk", "D_lua_callk"));
  mixin(bindCode("lua_getctx", "D_lua_getctx"));
  mixin(bindCode("lua_pcallk", "D_lua_pcallk"));
  mixin(bindCode("lua_load", "D_lua_load"));
  mixin(bindCode("lua_dump", "D_lua_dump"));
  mixin(bindCode("lua_yieldk", "D_lua_yieldk"));
  mixin(bindCode("lua_resume", "D_lua_resume"));
  mixin(bindCode("lua_status", "D_lua_status"));
  mixin(bindCode("LUA_GCSTOP_get", "D_LUA_GCSTOP_get"));
  mixin(bindCode("LUA_GCRESTART_get", "D_LUA_GCRESTART_get"));
  mixin(bindCode("LUA_GCCOLLECT_get", "D_LUA_GCCOLLECT_get"));
  mixin(bindCode("LUA_GCCOUNT_get", "D_LUA_GCCOUNT_get"));
  mixin(bindCode("LUA_GCCOUNTB_get", "D_LUA_GCCOUNTB_get"));
  mixin(bindCode("LUA_GCSTEP_get", "D_LUA_GCSTEP_get"));
  mixin(bindCode("LUA_GCSETPAUSE_get", "D_LUA_GCSETPAUSE_get"));
  mixin(bindCode("LUA_GCSETSTEPMUL_get", "D_LUA_GCSETSTEPMUL_get"));
  mixin(bindCode("LUA_GCSETMAJORINC_get", "D_LUA_GCSETMAJORINC_get"));
  mixin(bindCode("LUA_GCISRUNNING_get", "D_LUA_GCISRUNNING_get"));
  mixin(bindCode("LUA_GCGEN_get", "D_LUA_GCGEN_get"));
  mixin(bindCode("LUA_GCINC_get", "D_LUA_GCINC_get"));
  mixin(bindCode("lua_gc", "D_lua_gc"));
  mixin(bindCode("lua_error", "D_lua_error"));
  mixin(bindCode("lua_next", "D_lua_next"));
  mixin(bindCode("lua_concat", "D_lua_concat"));
  mixin(bindCode("lua_len", "D_lua_len"));
  mixin(bindCode("lua_getallocf", "D_lua_getallocf"));
  mixin(bindCode("lua_setallocf", "D_lua_setallocf"));
  mixin(bindCode("LUA_HOOKCALL_get", "D_LUA_HOOKCALL_get"));
  mixin(bindCode("LUA_HOOKRET_get", "D_LUA_HOOKRET_get"));
  mixin(bindCode("LUA_HOOKLINE_get", "D_LUA_HOOKLINE_get"));
  mixin(bindCode("LUA_HOOKCOUNT_get", "D_LUA_HOOKCOUNT_get"));
  mixin(bindCode("LUA_HOOKTAILCALL_get", "D_LUA_HOOKTAILCALL_get"));
  mixin(bindCode("LUA_MASKCALL_get", "D_LUA_MASKCALL_get"));
  mixin(bindCode("LUA_MASKRET_get", "D_LUA_MASKRET_get"));
  mixin(bindCode("LUA_MASKLINE_get", "D_LUA_MASKLINE_get"));
  mixin(bindCode("LUA_MASKCOUNT_get", "D_LUA_MASKCOUNT_get"));
  mixin(bindCode("lua_getstack", "D_lua_getstack"));
  mixin(bindCode("lua_getinfo", "D_lua_getinfo"));
  mixin(bindCode("lua_getlocal", "D_lua_getlocal"));
  mixin(bindCode("lua_setlocal", "D_lua_setlocal"));
  mixin(bindCode("lua_getupvalue", "D_lua_getupvalue"));
  mixin(bindCode("lua_setupvalue", "D_lua_setupvalue"));
  mixin(bindCode("lua_upvalueid", "D_lua_upvalueid"));
  mixin(bindCode("lua_upvaluejoin", "D_lua_upvaluejoin"));
  mixin(bindCode("lua_sethook", "D_lua_sethook"));
  mixin(bindCode("lua_gethook", "D_lua_gethook"));
  mixin(bindCode("lua_gethookmask", "D_lua_gethookmask"));
  mixin(bindCode("lua_gethookcount", "D_lua_gethookcount"));
  mixin(bindCode("lua_Debug_event_set", "D_lua_Debug_event_set"));
  mixin(bindCode("lua_Debug_event_get", "D_lua_Debug_event_get"));
  mixin(bindCode("lua_Debug_name_set", "D_lua_Debug_name_set"));
  mixin(bindCode("lua_Debug_name_get", "D_lua_Debug_name_get"));
  mixin(bindCode("lua_Debug_namewhat_set", "D_lua_Debug_namewhat_set"));
  mixin(bindCode("lua_Debug_namewhat_get", "D_lua_Debug_namewhat_get"));
  mixin(bindCode("lua_Debug_what_set", "D_lua_Debug_what_set"));
  mixin(bindCode("lua_Debug_what_get", "D_lua_Debug_what_get"));
  mixin(bindCode("lua_Debug_source_set", "D_lua_Debug_source_set"));
  mixin(bindCode("lua_Debug_source_get", "D_lua_Debug_source_get"));
  mixin(bindCode("lua_Debug_currentline_set", "D_lua_Debug_currentline_set"));
  mixin(bindCode("lua_Debug_currentline_get", "D_lua_Debug_currentline_get"));
  mixin(bindCode("lua_Debug_linedefined_set", "D_lua_Debug_linedefined_set"));
  mixin(bindCode("lua_Debug_linedefined_get", "D_lua_Debug_linedefined_get"));
  mixin(bindCode("lua_Debug_lastlinedefined_set", "D_lua_Debug_lastlinedefined_set"));
  mixin(bindCode("lua_Debug_lastlinedefined_get", "D_lua_Debug_lastlinedefined_get"));
  mixin(bindCode("lua_Debug_nups_set", "D_lua_Debug_nups_set"));
  mixin(bindCode("lua_Debug_nups_get", "D_lua_Debug_nups_get"));
  mixin(bindCode("lua_Debug_nparams_set", "D_lua_Debug_nparams_set"));
  mixin(bindCode("lua_Debug_nparams_get", "D_lua_Debug_nparams_get"));
  mixin(bindCode("lua_Debug_isvararg_set", "D_lua_Debug_isvararg_set"));
  mixin(bindCode("lua_Debug_isvararg_get", "D_lua_Debug_isvararg_get"));
  mixin(bindCode("lua_Debug_istailcall_set", "D_lua_Debug_istailcall_set"));
  mixin(bindCode("lua_Debug_istailcall_get", "D_lua_Debug_istailcall_get"));
  mixin(bindCode("lua_Debug_short_src_set", "D_lua_Debug_short_src_set"));
  mixin(bindCode("lua_Debug_short_src_get", "D_lua_Debug_short_src_get"));
  mixin(bindCode("lua_Debug_i_ci_set", "D_lua_Debug_i_ci_set"));
  mixin(bindCode("lua_Debug_i_ci_get", "D_lua_Debug_i_ci_get"));
  mixin(bindCode("new_lua_Debug", "D_new_lua_Debug"));
  mixin(bindCode("delete_lua_Debug", "D_delete_lua_Debug"));
}

//#if !defined(SWIG_D_NO_EXCEPTION_HELPER)
extern(C) void function(
  SwigExceptionCallback exceptionCallback,
  SwigExceptionCallback illegalArgumentCallback,
  SwigExceptionCallback illegalElementCallback,
  SwigExceptionCallback ioCallback,
  SwigExceptionCallback noSuchElementCallback) swigRegisterExceptionCallbackslua_module;
//#endif // SWIG_D_NO_EXCEPTION_HELPER

//#if !defined(SWIG_D_NO_STRING_HELPER)
extern(C) void function(SwigStringCallback callback) swigRegisterStringCallbacklua_module;
//#endif // SWIG_D_NO_STRING_HELPER


mixin template SwigOperatorDefinitions() {
  public override bool opEquals(Object o) {
    if (auto rhs = cast(typeof(this))o) {
      if (swigCPtr == rhs.swigCPtr) return true;
      static if (is(typeof(swigOpEquals(rhs)))) {
        return swigOpEquals(rhs);
      } else {
        return false; 
      }
    }
    return super.opEquals(o);
  }

  
  public override int opCmp(Object o) {
    static if (__traits(compiles, swigOpLt(typeof(this).init) &&
        swigOpEquals(typeof(this).init))) {
      if (auto rhs = cast(typeof(this))o) {
        if (swigOpLt(rhs)) {
          return -1;
        } else if (swigOpEquals(rhs)) {
          return 0;
        } else {
          return 1;
        }
      }
    }
    return super.opCmp(o);
  }

  private template swigOpBinary(string operator, string name) {
    enum swigOpBinary = `public void opOpAssign(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `Assign(rhs))) { swigOp` ~ name ~ `Assign(rhs);}` ~
      `public auto opBinary(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `(rhs))) { return swigOp` ~ name ~ `(rhs);}`;
  }
  mixin(swigOpBinary!("+", "Add"));
  mixin(swigOpBinary!("-", "Sub"));
  mixin(swigOpBinary!("*", "Mul"));
  mixin(swigOpBinary!("/", "Div"));
  mixin(swigOpBinary!("%", "Mod"));
  mixin(swigOpBinary!("&", "And"));
  mixin(swigOpBinary!("|", "Or"));
  mixin(swigOpBinary!("^", "Xor"));
  mixin(swigOpBinary!("<<", "Shl"));
  mixin(swigOpBinary!(">>", "Shr"));
  
  private template swigOpUnary(string operator, string name) {
    enum swigOpUnary = `public auto opUnary(string op)() if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `())) { return swigOp` ~ name ~ `();}`;   
  }
  mixin(swigOpUnary!("+", "Pos"));
  mixin(swigOpUnary!("-", "Neg"));
  mixin(swigOpUnary!("~", "Com"));
  mixin(swigOpUnary!("++", "Inc"));
  mixin(swigOpUnary!("--", "Dec"));


}


private class SwigExceptionHelper {
  static this() {
	// The D1/Tango version maps C++ exceptions to multiple exception types.
    swigRegisterExceptionCallbackslua_module(
      &setException,
      &setException,
      &setException,
      &setException,
      &setException
    );
  }

  static void setException(const char* message) {
    auto exception = new object.Exception(std.conv.to!string(message).idup);
    exception.next = SwigPendingException.retrieve();
    SwigPendingException.set(exception);
  }
}

package struct SwigPendingException {
public:
  static this() {
    m_sPendingCount = 0;
    m_sPendingException = null;
  }

  static bool isPending() {
    bool pending = false;
    if (m_sPendingCount > 0) {
      if (m_sPendingException !is null) {
        pending = true;
      }
    }
    return pending;
  }

  static void set(object.Exception e) {
    if (m_sPendingException !is null) {
      throw new object.Exception("FATAL: An earlier pending exception from C/C++ code " ~
        "was missed and thus not thrown (" ~ m_sPendingException.classinfo.name ~
        ": " ~ m_sPendingException.msg ~ ")!", e);
    }

    m_sPendingException = e;
    synchronized {
      ++m_sPendingCount;
    }
  }

  static object.Exception retrieve() {
    object.Exception e = null;
    if (m_sPendingCount > 0) {
      if (m_sPendingException !is null) {
        e = m_sPendingException;
        m_sPendingException = null;
        synchronized {
          --m_sPendingCount;
        }
      }
    }
    return e;
  }

private:
  // The pending exception counter is stored thread-global.
  static shared int m_sPendingCount;

  // The reference to the pending exception (if any) is stored thread-local.
  static object.Exception m_sPendingException;
}
alias void function(const char* message) SwigExceptionCallback;


private class SwigStringHelper {
  static this() {
    swigRegisterStringCallbacklua_module(&createString);
  }

  static const(char)* createString(const(char*) cString) {
    // We are effectively dup'ing the string here.
    // TODO: Is this also correct for D2/Phobos?
    return std.string.toStringz(std.conv.to!string(cString));
  }
}
alias const(char)* function(const(char*) cString) SwigStringCallback;


template SwigExternC(T) if (is(typeof(*(T.init)) P == function)) {
  static if (is(typeof(*(T.init)) R == return)) {
    static if (is(typeof(*(T.init)) P == function)) {
      alias extern(C) R function(P) SwigExternC;
    }
  }
}

extern(C) const(char)* function() LUA_ROOT_get;
extern(C) const(char)* function() LUA_DIRSEP_get;
extern(C) const(char)* function() LUA_ENV_get;
extern(C) const(char)* function() LUA_QS_get;
extern(C) int function() LUA_IDSIZE_get;
extern(C) int function() LUAI_MAXSHORTLEN_get;
extern(C) int function() LUAI_BITSINT_get;
extern(C) int function() LUAI_MAXSTACK_get;
extern(C) int function() LUAI_FIRSTPSEUDOIDX_get;
extern(C) const(char)* function() LUA_NUMBER_SCAN_get;
extern(C) const(char)* function() LUA_NUMBER_FMT_get;
extern(C) int function() LUAI_MAXNUMBER2STR_get;
extern(C) const(char)* function() LUA_VERSION_MAJOR_get;
extern(C) const(char)* function() LUA_VERSION_MINOR_get;
extern(C) int function() LUA_VERSION_NUM_get;
extern(C) const(char)* function() LUA_VERSION_RELEASE_get;
extern(C) const(char)* function() LUA_VERSION_get;
extern(C) const(char)* function() LUA_RELEASE_get;
extern(C) const(char)* function() LUA_COPYRIGHT_get;
extern(C) const(char)* function() LUA_AUTHORS_get;
extern(C) const(char)* function() LUA_SIGNATURE_get;
extern(C) int function() LUA_MULTRET_get;
extern(C) int function() LUA_REGISTRYINDEX_get;
extern(C) int function() LUA_OK_get;
extern(C) int function() LUA_YIELD_get;
extern(C) int function() LUA_ERRRUN_get;
extern(C) int function() LUA_ERRSYNTAX_get;
extern(C) int function() LUA_ERRMEM_get;
extern(C) int function() LUA_ERRGCMM_get;
extern(C) int function() LUA_ERRERR_get;
extern(C) int function() LUA_TNONE_get;
extern(C) int function() LUA_TNIL_get;
extern(C) int function() LUA_TBOOLEAN_get;
extern(C) int function() LUA_TLIGHTUSERDATA_get;
extern(C) int function() LUA_TNUMBER_get;
extern(C) int function() LUA_TSTRING_get;
extern(C) int function() LUA_TTABLE_get;
extern(C) int function() LUA_TFUNCTION_get;
extern(C) int function() LUA_TUSERDATA_get;
extern(C) int function() LUA_TTHREAD_get;
extern(C) int function() LUA_NUMTAGS_get;
extern(C) int function() LUA_MINSTACK_get;
extern(C) int function() LUA_RIDX_MAINTHREAD_get;
extern(C) int function() LUA_RIDX_GLOBALS_get;
extern(C) int function() LUA_RIDX_LAST_get;
extern(C) const(char)* function() lua_ident_get;
extern(C) void* function(void* jarg1, void* jarg2) lua_newstate;
extern(C) void function(void* jarg1) lua_close;
extern(C) void* function(void* jarg1) lua_newthread;
extern(C) void* function(void* jarg1, void* jarg2) lua_atpanic;
extern(C) void* function(void* jarg1) lua_version;
extern(C) int function(void* jarg1, int jarg2) lua_absindex;
extern(C) int function(void* jarg1) lua_gettop;
extern(C) void function(void* jarg1, int jarg2) lua_settop;
extern(C) void function(void* jarg1, int jarg2) lua_pushvalue;
extern(C) void function(void* jarg1, int jarg2) lua_remove;
extern(C) void function(void* jarg1, int jarg2) lua_insert;
extern(C) void function(void* jarg1, int jarg2) lua_replace;
extern(C) void function(void* jarg1, int jarg2, int jarg3) lua_copy;
extern(C) int function(void* jarg1, int jarg2) lua_checkstack;
extern(C) void function(void* jarg1, void* jarg2, int jarg3) lua_xmove;
extern(C) int function(void* jarg1, int jarg2) lua_isnumber;
extern(C) int function(void* jarg1, int jarg2) lua_isstring;
extern(C) int function(void* jarg1, int jarg2) lua_iscfunction;
extern(C) int function(void* jarg1, int jarg2) lua_isuserdata;
extern(C) int function(void* jarg1, int jarg2) lua_type;
extern(C) const(char)* function(void* jarg1, int jarg2) lua_typename;
extern(C) double function(void* jarg1, int jarg2, void* jarg3) lua_tonumberx;
extern(C) void* function(void* jarg1, int jarg2, void* jarg3) lua_tointegerx;
extern(C) core.stdc.config.c_ulong function(void* jarg1, int jarg2, void* jarg3) lua_tounsignedx;
extern(C) int function(void* jarg1, int jarg2) lua_toboolean;
extern(C) const(char)* function(void* jarg1, int jarg2, void* jarg3) lua_tolstring;
extern(C) size_t function(void* jarg1, int jarg2) lua_rawlen;
extern(C) void* function(void* jarg1, int jarg2) lua_tocfunction;
extern(C) void* function(void* jarg1, int jarg2) lua_touserdata;
extern(C) void* function(void* jarg1, int jarg2) lua_tothread;
extern(C) void* function(void* jarg1, int jarg2) lua_topointer;
extern(C) int function() LUA_OPADD_get;
extern(C) int function() LUA_OPSUB_get;
extern(C) int function() LUA_OPMUL_get;
extern(C) int function() LUA_OPDIV_get;
extern(C) int function() LUA_OPMOD_get;
extern(C) int function() LUA_OPPOW_get;
extern(C) int function() LUA_OPUNM_get;
extern(C) void function(void* jarg1, int jarg2) lua_arith;
extern(C) int function() LUA_OPEQ_get;
extern(C) int function() LUA_OPLT_get;
extern(C) int function() LUA_OPLE_get;
extern(C) int function(void* jarg1, int jarg2, int jarg3) lua_rawequal;
extern(C) int function(void* jarg1, int jarg2, int jarg3, int jarg4) lua_compare;
extern(C) void function(void* jarg1) lua_pushnil;
extern(C) void function(void* jarg1, double jarg2) lua_pushnumber;
extern(C) void function(void* jarg1, void* jarg2) lua_pushinteger;
extern(C) void function(void* jarg1, core.stdc.config.c_ulong jarg2) lua_pushunsigned;
extern(C) const(char)* function(void* jarg1, const(char)* jarg2, size_t jarg3) lua_pushlstring;
extern(C) const(char)* function(void* jarg1, const(char)* jarg2) lua_pushstring;
extern(C) const(char)* function(void* jarg1, const(char)* jarg2, void* jarg3) lua_pushvfstring;
extern(C) const(char)* function(void* jarg1, const(char)* jarg2) lua_pushfstring;
extern(C) void function(void* jarg1, void* jarg2, int jarg3) lua_pushcclosure;
extern(C) void function(void* jarg1, int jarg2) lua_pushboolean;
extern(C) void function(void* jarg1, void* jarg2) lua_pushlightuserdata;
extern(C) int function(void* jarg1) lua_pushthread;
extern(C) void function(void* jarg1, const(char)* jarg2) lua_getglobal;
extern(C) void function(void* jarg1, int jarg2) lua_gettable;
extern(C) void function(void* jarg1, int jarg2, const(char)* jarg3) lua_getfield;
extern(C) void function(void* jarg1, int jarg2) lua_rawget;
extern(C) void function(void* jarg1, int jarg2, int jarg3) lua_rawgeti;
extern(C) void function(void* jarg1, int jarg2, void* jarg3) lua_rawgetp;
extern(C) void function(void* jarg1, int jarg2, int jarg3) lua_createtable;
extern(C) void* function(void* jarg1, size_t jarg2) lua_newuserdata;
extern(C) int function(void* jarg1, int jarg2) lua_getmetatable;
extern(C) void function(void* jarg1, int jarg2) lua_getuservalue;
extern(C) void function(void* jarg1, const(char)* jarg2) lua_setglobal;
extern(C) void function(void* jarg1, int jarg2) lua_settable;
extern(C) void function(void* jarg1, int jarg2, const(char)* jarg3) lua_setfield;
extern(C) void function(void* jarg1, int jarg2) lua_rawset;
extern(C) void function(void* jarg1, int jarg2, int jarg3) lua_rawseti;
extern(C) void function(void* jarg1, int jarg2, void* jarg3) lua_rawsetp;
extern(C) int function(void* jarg1, int jarg2) lua_setmetatable;
extern(C) void function(void* jarg1, int jarg2) lua_setuservalue;
extern(C) void function(void* jarg1, int jarg2, int jarg3, int jarg4, void* jarg5) lua_callk;
extern(C) int function(void* jarg1, void* jarg2) lua_getctx;
extern(C) int function(void* jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void* jarg6) lua_pcallk;
extern(C) int function(void* jarg1, void* jarg2, void* jarg3, const(char)* jarg4, const(char)* jarg5) lua_load;
extern(C) int function(void* jarg1, void* jarg2, void* jarg3) lua_dump;
extern(C) int function(void* jarg1, int jarg2, int jarg3, void* jarg4) lua_yieldk;
extern(C) int function(void* jarg1, void* jarg2, int jarg3) lua_resume;
extern(C) int function(void* jarg1) lua_status;
extern(C) int function() LUA_GCSTOP_get;
extern(C) int function() LUA_GCRESTART_get;
extern(C) int function() LUA_GCCOLLECT_get;
extern(C) int function() LUA_GCCOUNT_get;
extern(C) int function() LUA_GCCOUNTB_get;
extern(C) int function() LUA_GCSTEP_get;
extern(C) int function() LUA_GCSETPAUSE_get;
extern(C) int function() LUA_GCSETSTEPMUL_get;
extern(C) int function() LUA_GCSETMAJORINC_get;
extern(C) int function() LUA_GCISRUNNING_get;
extern(C) int function() LUA_GCGEN_get;
extern(C) int function() LUA_GCINC_get;
extern(C) int function(void* jarg1, int jarg2, int jarg3) lua_gc;
extern(C) int function(void* jarg1) lua_error;
extern(C) int function(void* jarg1, int jarg2) lua_next;
extern(C) void function(void* jarg1, int jarg2) lua_concat;
extern(C) void function(void* jarg1, int jarg2) lua_len;
extern(C) void* function(void* jarg1, void* jarg2) lua_getallocf;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) lua_setallocf;
extern(C) int function() LUA_HOOKCALL_get;
extern(C) int function() LUA_HOOKRET_get;
extern(C) int function() LUA_HOOKLINE_get;
extern(C) int function() LUA_HOOKCOUNT_get;
extern(C) int function() LUA_HOOKTAILCALL_get;
extern(C) int function() LUA_MASKCALL_get;
extern(C) int function() LUA_MASKRET_get;
extern(C) int function() LUA_MASKLINE_get;
extern(C) int function() LUA_MASKCOUNT_get;
extern(C) int function(void* jarg1, int jarg2, void* jarg3) lua_getstack;
extern(C) int function(void* jarg1, const(char)* jarg2, void* jarg3) lua_getinfo;
extern(C) const(char)* function(void* jarg1, void* jarg2, int jarg3) lua_getlocal;
extern(C) const(char)* function(void* jarg1, void* jarg2, int jarg3) lua_setlocal;
extern(C) const(char)* function(void* jarg1, int jarg2, int jarg3) lua_getupvalue;
extern(C) const(char)* function(void* jarg1, int jarg2, int jarg3) lua_setupvalue;
extern(C) void* function(void* jarg1, int jarg2, int jarg3) lua_upvalueid;
extern(C) void function(void* jarg1, int jarg2, int jarg3, int jarg4, int jarg5) lua_upvaluejoin;
extern(C) int function(void* jarg1, void* jarg2, int jarg3, int jarg4) lua_sethook;
extern(C) void* function(void* jarg1) lua_gethook;
extern(C) int function(void* jarg1) lua_gethookmask;
extern(C) int function(void* jarg1) lua_gethookcount;
extern(C) void function(void* jarg1, int jarg2) lua_Debug_event_set;
extern(C) int function(void* jarg1) lua_Debug_event_get;
extern(C) void function(void* jarg1, const(char)* jarg2) lua_Debug_name_set;
extern(C) const(char)* function(void* jarg1) lua_Debug_name_get;
extern(C) void function(void* jarg1, const(char)* jarg2) lua_Debug_namewhat_set;
extern(C) const(char)* function(void* jarg1) lua_Debug_namewhat_get;
extern(C) void function(void* jarg1, const(char)* jarg2) lua_Debug_what_set;
extern(C) const(char)* function(void* jarg1) lua_Debug_what_get;
extern(C) void function(void* jarg1, const(char)* jarg2) lua_Debug_source_set;
extern(C) const(char)* function(void* jarg1) lua_Debug_source_get;
extern(C) void function(void* jarg1, int jarg2) lua_Debug_currentline_set;
extern(C) int function(void* jarg1) lua_Debug_currentline_get;
extern(C) void function(void* jarg1, int jarg2) lua_Debug_linedefined_set;
extern(C) int function(void* jarg1) lua_Debug_linedefined_get;
extern(C) void function(void* jarg1, int jarg2) lua_Debug_lastlinedefined_set;
extern(C) int function(void* jarg1) lua_Debug_lastlinedefined_get;
extern(C) void function(void* jarg1, ubyte jarg2) lua_Debug_nups_set;
extern(C) ubyte function(void* jarg1) lua_Debug_nups_get;
extern(C) void function(void* jarg1, ubyte jarg2) lua_Debug_nparams_set;
extern(C) ubyte function(void* jarg1) lua_Debug_nparams_get;
extern(C) void function(void* jarg1, char jarg2) lua_Debug_isvararg_set;
extern(C) char function(void* jarg1) lua_Debug_isvararg_get;
extern(C) void function(void* jarg1, char jarg2) lua_Debug_istailcall_set;
extern(C) char function(void* jarg1) lua_Debug_istailcall_get;
extern(C) void function(void* jarg1, const(char)* jarg2) lua_Debug_short_src_set;
extern(C) const(char)* function(void* jarg1) lua_Debug_short_src_get;
extern(C) void function(void* jarg1, void* jarg2) lua_Debug_i_ci_set;
extern(C) void* function(void* jarg1) lua_Debug_i_ci_get;
extern(C) void* function() new_lua_Debug;
extern(C) void function(void* jarg1) delete_lua_Debug;
