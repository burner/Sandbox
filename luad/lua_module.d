/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module lua_module;

static import lua_module_im;
static import core.stdc.config;

static import std.conv;
static import std.string;


string LUA_ROOT() @property {
  string ret = std.conv.to!string(lua_module_im.LUA_ROOT_get());
  return ret;
}

string LUA_DIRSEP() @property {
  string ret = std.conv.to!string(lua_module_im.LUA_DIRSEP_get());
  return ret;
}

string LUA_ENV() @property {
  string ret = std.conv.to!string(lua_module_im.LUA_ENV_get());
  return ret;
}

string LUA_QS() @property {
  string ret = std.conv.to!string(lua_module_im.LUA_QS_get());
  return ret;
}

int LUA_IDSIZE() @property {
  auto ret = lua_module_im.LUA_IDSIZE_get();
  return ret;
}

int LUAI_MAXSHORTLEN() @property {
  auto ret = lua_module_im.LUAI_MAXSHORTLEN_get();
  return ret;
}

int LUAI_BITSINT() @property {
  auto ret = lua_module_im.LUAI_BITSINT_get();
  return ret;
}

int LUAI_MAXSTACK() @property {
  auto ret = lua_module_im.LUAI_MAXSTACK_get();
  return ret;
}

int LUAI_FIRSTPSEUDOIDX() @property {
  auto ret = lua_module_im.LUAI_FIRSTPSEUDOIDX_get();
  return ret;
}

string LUA_NUMBER_SCAN() @property {
  string ret = std.conv.to!string(lua_module_im.LUA_NUMBER_SCAN_get());
  return ret;
}

string LUA_NUMBER_FMT() @property {
  string ret = std.conv.to!string(lua_module_im.LUA_NUMBER_FMT_get());
  return ret;
}

int LUAI_MAXNUMBER2STR() @property {
  auto ret = lua_module_im.LUAI_MAXNUMBER2STR_get();
  return ret;
}

string LUA_VERSION_MAJOR() @property {
  string ret = std.conv.to!string(lua_module_im.LUA_VERSION_MAJOR_get());
  return ret;
}

string LUA_VERSION_MINOR() @property {
  string ret = std.conv.to!string(lua_module_im.LUA_VERSION_MINOR_get());
  return ret;
}

int LUA_VERSION_NUM() @property {
  auto ret = lua_module_im.LUA_VERSION_NUM_get();
  return ret;
}

string LUA_VERSION_RELEASE() @property {
  string ret = std.conv.to!string(lua_module_im.LUA_VERSION_RELEASE_get());
  return ret;
}

string LUA_VERSION() @property {
  string ret = std.conv.to!string(lua_module_im.LUA_VERSION_get());
  return ret;
}

string LUA_RELEASE() @property {
  string ret = std.conv.to!string(lua_module_im.LUA_RELEASE_get());
  return ret;
}

string LUA_COPYRIGHT() @property {
  string ret = std.conv.to!string(lua_module_im.LUA_COPYRIGHT_get());
  return ret;
}

string LUA_AUTHORS() @property {
  string ret = std.conv.to!string(lua_module_im.LUA_AUTHORS_get());
  return ret;
}

string LUA_SIGNATURE() @property {
  string ret = std.conv.to!string(lua_module_im.LUA_SIGNATURE_get());
  return ret;
}

int LUA_MULTRET() @property {
  auto ret = lua_module_im.LUA_MULTRET_get();
  return ret;
}

int LUA_REGISTRYINDEX() @property {
  auto ret = lua_module_im.LUA_REGISTRYINDEX_get();
  return ret;
}

int LUA_OK() @property {
  auto ret = lua_module_im.LUA_OK_get();
  return ret;
}

int LUA_YIELD() @property {
  auto ret = lua_module_im.LUA_YIELD_get();
  return ret;
}

int LUA_ERRRUN() @property {
  auto ret = lua_module_im.LUA_ERRRUN_get();
  return ret;
}

int LUA_ERRSYNTAX() @property {
  auto ret = lua_module_im.LUA_ERRSYNTAX_get();
  return ret;
}

int LUA_ERRMEM() @property {
  auto ret = lua_module_im.LUA_ERRMEM_get();
  return ret;
}

int LUA_ERRGCMM() @property {
  auto ret = lua_module_im.LUA_ERRGCMM_get();
  return ret;
}

int LUA_ERRERR() @property {
  auto ret = lua_module_im.LUA_ERRERR_get();
  return ret;
}

int LUA_TNONE() @property {
  auto ret = lua_module_im.LUA_TNONE_get();
  return ret;
}

int LUA_TNIL() @property {
  auto ret = lua_module_im.LUA_TNIL_get();
  return ret;
}

int LUA_TBOOLEAN() @property {
  auto ret = lua_module_im.LUA_TBOOLEAN_get();
  return ret;
}

int LUA_TLIGHTUSERDATA() @property {
  auto ret = lua_module_im.LUA_TLIGHTUSERDATA_get();
  return ret;
}

int LUA_TNUMBER() @property {
  auto ret = lua_module_im.LUA_TNUMBER_get();
  return ret;
}

int LUA_TSTRING() @property {
  auto ret = lua_module_im.LUA_TSTRING_get();
  return ret;
}

int LUA_TTABLE() @property {
  auto ret = lua_module_im.LUA_TTABLE_get();
  return ret;
}

int LUA_TFUNCTION() @property {
  auto ret = lua_module_im.LUA_TFUNCTION_get();
  return ret;
}

int LUA_TUSERDATA() @property {
  auto ret = lua_module_im.LUA_TUSERDATA_get();
  return ret;
}

int LUA_TTHREAD() @property {
  auto ret = lua_module_im.LUA_TTHREAD_get();
  return ret;
}

int LUA_NUMTAGS() @property {
  auto ret = lua_module_im.LUA_NUMTAGS_get();
  return ret;
}

int LUA_MINSTACK() @property {
  auto ret = lua_module_im.LUA_MINSTACK_get();
  return ret;
}

int LUA_RIDX_MAINTHREAD() @property {
  auto ret = lua_module_im.LUA_RIDX_MAINTHREAD_get();
  return ret;
}

int LUA_RIDX_GLOBALS() @property {
  auto ret = lua_module_im.LUA_RIDX_GLOBALS_get();
  return ret;
}

int LUA_RIDX_LAST() @property {
  auto ret = lua_module_im.LUA_RIDX_LAST_get();
  return ret;
}

string lua_ident() @property {
  string ret = std.conv.to!string(lua_module_im.lua_ident_get());
  return ret;
}

SWIGTYPE_p_lua_State lua_newstate(lua_module_im.SwigExternC!(void* function(void*, void*, size_t, size_t)) f, void* ud) {
  void* cPtr = lua_module_im.lua_newstate(cast(void*)f, cast(void*)ud);
  SWIGTYPE_p_lua_State ret = (cPtr is null) ? null : new SWIGTYPE_p_lua_State(cPtr, false);
  return ret;
}

void lua_close(SWIGTYPE_p_lua_State L) {
  lua_module_im.lua_close(SWIGTYPE_p_lua_State.swigGetCPtr(L));
}

SWIGTYPE_p_lua_State lua_newthread(SWIGTYPE_p_lua_State L) {
  void* cPtr = lua_module_im.lua_newthread(SWIGTYPE_p_lua_State.swigGetCPtr(L));
  SWIGTYPE_p_lua_State ret = (cPtr is null) ? null : new SWIGTYPE_p_lua_State(cPtr, false);
  return ret;
}

SWIGTYPE_p_f_p_lua_State__int lua_atpanic(SWIGTYPE_p_lua_State L, SWIGTYPE_p_f_p_lua_State__int panicf) {
  void* cPtr = lua_module_im.lua_atpanic(SWIGTYPE_p_lua_State.swigGetCPtr(L), SWIGTYPE_p_f_p_lua_State__int.swigGetCPtr(panicf));
  SWIGTYPE_p_f_p_lua_State__int ret = (cPtr is null) ? null : new SWIGTYPE_p_f_p_lua_State__int(cPtr, false);
  return ret;
}

double* lua_version(SWIGTYPE_p_lua_State L) {
  auto ret = cast(double*)lua_module_im.lua_version(SWIGTYPE_p_lua_State.swigGetCPtr(L));
  return ret;
}

int lua_absindex(SWIGTYPE_p_lua_State L, int idx) {
  auto ret = lua_module_im.lua_absindex(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
  return ret;
}

int lua_gettop(SWIGTYPE_p_lua_State L) {
  auto ret = lua_module_im.lua_gettop(SWIGTYPE_p_lua_State.swigGetCPtr(L));
  return ret;
}

void lua_settop(SWIGTYPE_p_lua_State L, int idx) {
  lua_module_im.lua_settop(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
}

void lua_pushvalue(SWIGTYPE_p_lua_State L, int idx) {
  lua_module_im.lua_pushvalue(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
}

void lua_remove(SWIGTYPE_p_lua_State L, int idx) {
  lua_module_im.lua_remove(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
}

void lua_insert(SWIGTYPE_p_lua_State L, int idx) {
  lua_module_im.lua_insert(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
}

void lua_replace(SWIGTYPE_p_lua_State L, int idx) {
  lua_module_im.lua_replace(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
}

void lua_copy(SWIGTYPE_p_lua_State L, int fromidx, int toidx) {
  lua_module_im.lua_copy(SWIGTYPE_p_lua_State.swigGetCPtr(L), fromidx, toidx);
}

int lua_checkstack(SWIGTYPE_p_lua_State L, int sz) {
  auto ret = lua_module_im.lua_checkstack(SWIGTYPE_p_lua_State.swigGetCPtr(L), sz);
  return ret;
}

void lua_xmove(SWIGTYPE_p_lua_State from, SWIGTYPE_p_lua_State to, int n) {
  lua_module_im.lua_xmove(SWIGTYPE_p_lua_State.swigGetCPtr(from), SWIGTYPE_p_lua_State.swigGetCPtr(to), n);
}

int lua_isnumber(SWIGTYPE_p_lua_State L, int idx) {
  auto ret = lua_module_im.lua_isnumber(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
  return ret;
}

int lua_isstring(SWIGTYPE_p_lua_State L, int idx) {
  auto ret = lua_module_im.lua_isstring(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
  return ret;
}

int lua_iscfunction(SWIGTYPE_p_lua_State L, int idx) {
  auto ret = lua_module_im.lua_iscfunction(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
  return ret;
}

int lua_isuserdata(SWIGTYPE_p_lua_State L, int idx) {
  auto ret = lua_module_im.lua_isuserdata(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
  return ret;
}

int lua_type(SWIGTYPE_p_lua_State L, int idx) {
  auto ret = lua_module_im.lua_type(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
  return ret;
}

string lua_typename(SWIGTYPE_p_lua_State L, int tp) {
  string ret = std.conv.to!string(lua_module_im.lua_typename(SWIGTYPE_p_lua_State.swigGetCPtr(L), tp));
  return ret;
}

double lua_tonumberx(SWIGTYPE_p_lua_State L, int idx, int* isnum) {
  auto ret = lua_module_im.lua_tonumberx(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx, cast(void*)isnum);
  return ret;
}

SWIGTYPE_p_ptrdiff_t lua_tointegerx(SWIGTYPE_p_lua_State L, int idx, int* isnum) {
  SWIGTYPE_p_ptrdiff_t ret = new SWIGTYPE_p_ptrdiff_t(lua_module_im.lua_tointegerx(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx, cast(void*)isnum), true);
  return ret;
}

core.stdc.config.c_ulong lua_tounsignedx(SWIGTYPE_p_lua_State L, int idx, int* isnum) {
  auto ret = lua_module_im.lua_tounsignedx(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx, cast(void*)isnum);
  return ret;
}

int lua_toboolean(SWIGTYPE_p_lua_State L, int idx) {
  auto ret = lua_module_im.lua_toboolean(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
  return ret;
}

string lua_tolstring(SWIGTYPE_p_lua_State L, int idx, size_t* len) {
  string ret = std.conv.to!string(lua_module_im.lua_tolstring(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx, cast(void*)len));
  return ret;
}

size_t lua_rawlen(SWIGTYPE_p_lua_State L, int idx) {
  auto ret = lua_module_im.lua_rawlen(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
  return ret;
}

SWIGTYPE_p_f_p_lua_State__int lua_tocfunction(SWIGTYPE_p_lua_State L, int idx) {
  void* cPtr = lua_module_im.lua_tocfunction(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
  SWIGTYPE_p_f_p_lua_State__int ret = (cPtr is null) ? null : new SWIGTYPE_p_f_p_lua_State__int(cPtr, false);
  return ret;
}

void* lua_touserdata(SWIGTYPE_p_lua_State L, int idx) {
  auto ret = cast(void*)lua_module_im.lua_touserdata(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
  return ret;
}

SWIGTYPE_p_lua_State lua_tothread(SWIGTYPE_p_lua_State L, int idx) {
  void* cPtr = lua_module_im.lua_tothread(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
  SWIGTYPE_p_lua_State ret = (cPtr is null) ? null : new SWIGTYPE_p_lua_State(cPtr, false);
  return ret;
}

void* lua_topointer(SWIGTYPE_p_lua_State L, int idx) {
  auto ret = cast(void*)lua_module_im.lua_topointer(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
  return ret;
}

int LUA_OPADD() @property {
  auto ret = lua_module_im.LUA_OPADD_get();
  return ret;
}

int LUA_OPSUB() @property {
  auto ret = lua_module_im.LUA_OPSUB_get();
  return ret;
}

int LUA_OPMUL() @property {
  auto ret = lua_module_im.LUA_OPMUL_get();
  return ret;
}

int LUA_OPDIV() @property {
  auto ret = lua_module_im.LUA_OPDIV_get();
  return ret;
}

int LUA_OPMOD() @property {
  auto ret = lua_module_im.LUA_OPMOD_get();
  return ret;
}

int LUA_OPPOW() @property {
  auto ret = lua_module_im.LUA_OPPOW_get();
  return ret;
}

int LUA_OPUNM() @property {
  auto ret = lua_module_im.LUA_OPUNM_get();
  return ret;
}

void lua_arith(SWIGTYPE_p_lua_State L, int op) {
  lua_module_im.lua_arith(SWIGTYPE_p_lua_State.swigGetCPtr(L), op);
}

int LUA_OPEQ() @property {
  auto ret = lua_module_im.LUA_OPEQ_get();
  return ret;
}

int LUA_OPLT() @property {
  auto ret = lua_module_im.LUA_OPLT_get();
  return ret;
}

int LUA_OPLE() @property {
  auto ret = lua_module_im.LUA_OPLE_get();
  return ret;
}

int lua_rawequal(SWIGTYPE_p_lua_State L, int idx1, int idx2) {
  auto ret = lua_module_im.lua_rawequal(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx1, idx2);
  return ret;
}

int lua_compare(SWIGTYPE_p_lua_State L, int idx1, int idx2, int op) {
  auto ret = lua_module_im.lua_compare(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx1, idx2, op);
  return ret;
}

void lua_pushnil(SWIGTYPE_p_lua_State L) {
  lua_module_im.lua_pushnil(SWIGTYPE_p_lua_State.swigGetCPtr(L));
}

void lua_pushnumber(SWIGTYPE_p_lua_State L, double n) {
  lua_module_im.lua_pushnumber(SWIGTYPE_p_lua_State.swigGetCPtr(L), n);
}

void lua_pushinteger(SWIGTYPE_p_lua_State L, SWIGTYPE_p_ptrdiff_t n) {
  lua_module_im.lua_pushinteger(SWIGTYPE_p_lua_State.swigGetCPtr(L), SWIGTYPE_p_ptrdiff_t.swigGetCPtr(n));
  if (lua_module_im.SwigPendingException.isPending) throw lua_module_im.SwigPendingException.retrieve();
}

void lua_pushunsigned(SWIGTYPE_p_lua_State L, core.stdc.config.c_ulong n) {
  lua_module_im.lua_pushunsigned(SWIGTYPE_p_lua_State.swigGetCPtr(L), n);
}

string lua_pushlstring(SWIGTYPE_p_lua_State L, string s, size_t l) {
  string ret = std.conv.to!string(lua_module_im.lua_pushlstring(SWIGTYPE_p_lua_State.swigGetCPtr(L), (s ? std.string.toStringz(s) : null), l));
  return ret;
}

string lua_pushstring(SWIGTYPE_p_lua_State L, string s) {
  string ret = std.conv.to!string(lua_module_im.lua_pushstring(SWIGTYPE_p_lua_State.swigGetCPtr(L), (s ? std.string.toStringz(s) : null)));
  return ret;
}

string lua_pushvfstring(SWIGTYPE_p_lua_State L, string fmt, SWIGTYPE_p_va_list argp) {
  string ret = std.conv.to!string(lua_module_im.lua_pushvfstring(SWIGTYPE_p_lua_State.swigGetCPtr(L), (fmt ? std.string.toStringz(fmt) : null), SWIGTYPE_p_va_list.swigGetCPtr(argp)));
  if (lua_module_im.SwigPendingException.isPending) throw lua_module_im.SwigPendingException.retrieve();
  return ret;
}

string lua_pushfstring(SWIGTYPE_p_lua_State L, string fmt) {
  string ret = std.conv.to!string(lua_module_im.lua_pushfstring(SWIGTYPE_p_lua_State.swigGetCPtr(L), (fmt ? std.string.toStringz(fmt) : null)));
  return ret;
}

void lua_pushcclosure(SWIGTYPE_p_lua_State L, SWIGTYPE_p_f_p_lua_State__int fn, int n) {
  lua_module_im.lua_pushcclosure(SWIGTYPE_p_lua_State.swigGetCPtr(L), SWIGTYPE_p_f_p_lua_State__int.swigGetCPtr(fn), n);
}

void lua_pushboolean(SWIGTYPE_p_lua_State L, int b) {
  lua_module_im.lua_pushboolean(SWIGTYPE_p_lua_State.swigGetCPtr(L), b);
}

void lua_pushlightuserdata(SWIGTYPE_p_lua_State L, void* p) {
  lua_module_im.lua_pushlightuserdata(SWIGTYPE_p_lua_State.swigGetCPtr(L), cast(void*)p);
}

int lua_pushthread(SWIGTYPE_p_lua_State L) {
  auto ret = lua_module_im.lua_pushthread(SWIGTYPE_p_lua_State.swigGetCPtr(L));
  return ret;
}

void lua_getglobal(SWIGTYPE_p_lua_State L, string var) {
  lua_module_im.lua_getglobal(SWIGTYPE_p_lua_State.swigGetCPtr(L), (var ? std.string.toStringz(var) : null));
}

void lua_gettable(SWIGTYPE_p_lua_State L, int idx) {
  lua_module_im.lua_gettable(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
}

void lua_getfield(SWIGTYPE_p_lua_State L, int idx, string k) {
  lua_module_im.lua_getfield(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx, (k ? std.string.toStringz(k) : null));
}

void lua_rawget(SWIGTYPE_p_lua_State L, int idx) {
  lua_module_im.lua_rawget(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
}

void lua_rawgeti(SWIGTYPE_p_lua_State L, int idx, int n) {
  lua_module_im.lua_rawgeti(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx, n);
}

void lua_rawgetp(SWIGTYPE_p_lua_State L, int idx, void* p) {
  lua_module_im.lua_rawgetp(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx, cast(void*)p);
}

void lua_createtable(SWIGTYPE_p_lua_State L, int narr, int nrec) {
  lua_module_im.lua_createtable(SWIGTYPE_p_lua_State.swigGetCPtr(L), narr, nrec);
}

void* lua_newuserdata(SWIGTYPE_p_lua_State L, size_t sz) {
  auto ret = cast(void*)lua_module_im.lua_newuserdata(SWIGTYPE_p_lua_State.swigGetCPtr(L), sz);
  return ret;
}

int lua_getmetatable(SWIGTYPE_p_lua_State L, int objindex) {
  auto ret = lua_module_im.lua_getmetatable(SWIGTYPE_p_lua_State.swigGetCPtr(L), objindex);
  return ret;
}

void lua_getuservalue(SWIGTYPE_p_lua_State L, int idx) {
  lua_module_im.lua_getuservalue(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
}

void lua_setglobal(SWIGTYPE_p_lua_State L, string var) {
  lua_module_im.lua_setglobal(SWIGTYPE_p_lua_State.swigGetCPtr(L), (var ? std.string.toStringz(var) : null));
}

void lua_settable(SWIGTYPE_p_lua_State L, int idx) {
  lua_module_im.lua_settable(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
}

void lua_setfield(SWIGTYPE_p_lua_State L, int idx, string k) {
  lua_module_im.lua_setfield(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx, (k ? std.string.toStringz(k) : null));
}

void lua_rawset(SWIGTYPE_p_lua_State L, int idx) {
  lua_module_im.lua_rawset(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
}

void lua_rawseti(SWIGTYPE_p_lua_State L, int idx, int n) {
  lua_module_im.lua_rawseti(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx, n);
}

void lua_rawsetp(SWIGTYPE_p_lua_State L, int idx, void* p) {
  lua_module_im.lua_rawsetp(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx, cast(void*)p);
}

int lua_setmetatable(SWIGTYPE_p_lua_State L, int objindex) {
  auto ret = lua_module_im.lua_setmetatable(SWIGTYPE_p_lua_State.swigGetCPtr(L), objindex);
  return ret;
}

void lua_setuservalue(SWIGTYPE_p_lua_State L, int idx) {
  lua_module_im.lua_setuservalue(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
}

void lua_callk(SWIGTYPE_p_lua_State L, int nargs, int nresults, int ctx, SWIGTYPE_p_f_p_lua_State__int k) {
  lua_module_im.lua_callk(SWIGTYPE_p_lua_State.swigGetCPtr(L), nargs, nresults, ctx, SWIGTYPE_p_f_p_lua_State__int.swigGetCPtr(k));
}

int lua_getctx(SWIGTYPE_p_lua_State L, int* ctx) {
  auto ret = lua_module_im.lua_getctx(SWIGTYPE_p_lua_State.swigGetCPtr(L), cast(void*)ctx);
  return ret;
}

int lua_pcallk(SWIGTYPE_p_lua_State L, int nargs, int nresults, int errfunc, int ctx, SWIGTYPE_p_f_p_lua_State__int k) {
  auto ret = lua_module_im.lua_pcallk(SWIGTYPE_p_lua_State.swigGetCPtr(L), nargs, nresults, errfunc, ctx, SWIGTYPE_p_f_p_lua_State__int.swigGetCPtr(k));
  return ret;
}

int lua_load(SWIGTYPE_p_lua_State L, SWIGTYPE_p_f_p_lua_State_p_void_p_size_t__p_char reader, void* dt, string chunkname, string mode) {
  auto ret = lua_module_im.lua_load(SWIGTYPE_p_lua_State.swigGetCPtr(L), SWIGTYPE_p_f_p_lua_State_p_void_p_size_t__p_char.swigGetCPtr(reader), cast(void*)dt, (chunkname ? std.string.toStringz(chunkname) : null), (mode ? std.string.toStringz(mode) : null));
  return ret;
}

int lua_dump(SWIGTYPE_p_lua_State L, SWIGTYPE_p_f_p_lua_State_p_q_const__void_size_t_p_void__int writer, void* data) {
  auto ret = lua_module_im.lua_dump(SWIGTYPE_p_lua_State.swigGetCPtr(L), SWIGTYPE_p_f_p_lua_State_p_q_const__void_size_t_p_void__int.swigGetCPtr(writer), cast(void*)data);
  return ret;
}

int lua_yieldk(SWIGTYPE_p_lua_State L, int nresults, int ctx, SWIGTYPE_p_f_p_lua_State__int k) {
  auto ret = lua_module_im.lua_yieldk(SWIGTYPE_p_lua_State.swigGetCPtr(L), nresults, ctx, SWIGTYPE_p_f_p_lua_State__int.swigGetCPtr(k));
  return ret;
}

int lua_resume(SWIGTYPE_p_lua_State L, SWIGTYPE_p_lua_State from, int narg) {
  auto ret = lua_module_im.lua_resume(SWIGTYPE_p_lua_State.swigGetCPtr(L), SWIGTYPE_p_lua_State.swigGetCPtr(from), narg);
  return ret;
}

int lua_status(SWIGTYPE_p_lua_State L) {
  auto ret = lua_module_im.lua_status(SWIGTYPE_p_lua_State.swigGetCPtr(L));
  return ret;
}

int LUA_GCSTOP() @property {
  auto ret = lua_module_im.LUA_GCSTOP_get();
  return ret;
}

int LUA_GCRESTART() @property {
  auto ret = lua_module_im.LUA_GCRESTART_get();
  return ret;
}

int LUA_GCCOLLECT() @property {
  auto ret = lua_module_im.LUA_GCCOLLECT_get();
  return ret;
}

int LUA_GCCOUNT() @property {
  auto ret = lua_module_im.LUA_GCCOUNT_get();
  return ret;
}

int LUA_GCCOUNTB() @property {
  auto ret = lua_module_im.LUA_GCCOUNTB_get();
  return ret;
}

int LUA_GCSTEP() @property {
  auto ret = lua_module_im.LUA_GCSTEP_get();
  return ret;
}

int LUA_GCSETPAUSE() @property {
  auto ret = lua_module_im.LUA_GCSETPAUSE_get();
  return ret;
}

int LUA_GCSETSTEPMUL() @property {
  auto ret = lua_module_im.LUA_GCSETSTEPMUL_get();
  return ret;
}

int LUA_GCSETMAJORINC() @property {
  auto ret = lua_module_im.LUA_GCSETMAJORINC_get();
  return ret;
}

int LUA_GCISRUNNING() @property {
  auto ret = lua_module_im.LUA_GCISRUNNING_get();
  return ret;
}

int LUA_GCGEN() @property {
  auto ret = lua_module_im.LUA_GCGEN_get();
  return ret;
}

int LUA_GCINC() @property {
  auto ret = lua_module_im.LUA_GCINC_get();
  return ret;
}

int lua_gc(SWIGTYPE_p_lua_State L, int what, int data) {
  auto ret = lua_module_im.lua_gc(SWIGTYPE_p_lua_State.swigGetCPtr(L), what, data);
  return ret;
}

int lua_error(SWIGTYPE_p_lua_State L) {
  auto ret = lua_module_im.lua_error(SWIGTYPE_p_lua_State.swigGetCPtr(L));
  return ret;
}

int lua_next(SWIGTYPE_p_lua_State L, int idx) {
  auto ret = lua_module_im.lua_next(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
  return ret;
}

void lua_concat(SWIGTYPE_p_lua_State L, int n) {
  lua_module_im.lua_concat(SWIGTYPE_p_lua_State.swigGetCPtr(L), n);
}

void lua_len(SWIGTYPE_p_lua_State L, int idx) {
  lua_module_im.lua_len(SWIGTYPE_p_lua_State.swigGetCPtr(L), idx);
}

lua_module_im.SwigExternC!(void* function(void*, void*, size_t, size_t)) lua_getallocf(SWIGTYPE_p_lua_State L, void** ud) {
  auto ret = cast(lua_module_im.SwigExternC!(void* function(void*, void*, size_t, size_t)))lua_module_im.lua_getallocf(SWIGTYPE_p_lua_State.swigGetCPtr(L), cast(void*)ud);
  return ret;
}

void lua_setallocf(SWIGTYPE_p_lua_State L, lua_module_im.SwigExternC!(void* function(void*, void*, size_t, size_t)) f, void* ud) {
  lua_module_im.lua_setallocf(SWIGTYPE_p_lua_State.swigGetCPtr(L), cast(void*)f, cast(void*)ud);
}

int LUA_HOOKCALL() @property {
  auto ret = lua_module_im.LUA_HOOKCALL_get();
  return ret;
}

int LUA_HOOKRET() @property {
  auto ret = lua_module_im.LUA_HOOKRET_get();
  return ret;
}

int LUA_HOOKLINE() @property {
  auto ret = lua_module_im.LUA_HOOKLINE_get();
  return ret;
}

int LUA_HOOKCOUNT() @property {
  auto ret = lua_module_im.LUA_HOOKCOUNT_get();
  return ret;
}

int LUA_HOOKTAILCALL() @property {
  auto ret = lua_module_im.LUA_HOOKTAILCALL_get();
  return ret;
}

int LUA_MASKCALL() @property {
  auto ret = lua_module_im.LUA_MASKCALL_get();
  return ret;
}

int LUA_MASKRET() @property {
  auto ret = lua_module_im.LUA_MASKRET_get();
  return ret;
}

int LUA_MASKLINE() @property {
  auto ret = lua_module_im.LUA_MASKLINE_get();
  return ret;
}

int LUA_MASKCOUNT() @property {
  auto ret = lua_module_im.LUA_MASKCOUNT_get();
  return ret;
}

int lua_getstack(SWIGTYPE_p_lua_State L, int level, SWIGTYPE_p_lua_Debug ar) {
  auto ret = lua_module_im.lua_getstack(SWIGTYPE_p_lua_State.swigGetCPtr(L), level, SWIGTYPE_p_lua_Debug.swigGetCPtr(ar));
  return ret;
}

int lua_getinfo(SWIGTYPE_p_lua_State L, string what, SWIGTYPE_p_lua_Debug ar) {
  auto ret = lua_module_im.lua_getinfo(SWIGTYPE_p_lua_State.swigGetCPtr(L), (what ? std.string.toStringz(what) : null), SWIGTYPE_p_lua_Debug.swigGetCPtr(ar));
  return ret;
}

string lua_getlocal(SWIGTYPE_p_lua_State L, SWIGTYPE_p_lua_Debug ar, int n) {
  string ret = std.conv.to!string(lua_module_im.lua_getlocal(SWIGTYPE_p_lua_State.swigGetCPtr(L), SWIGTYPE_p_lua_Debug.swigGetCPtr(ar), n));
  return ret;
}

string lua_setlocal(SWIGTYPE_p_lua_State L, SWIGTYPE_p_lua_Debug ar, int n) {
  string ret = std.conv.to!string(lua_module_im.lua_setlocal(SWIGTYPE_p_lua_State.swigGetCPtr(L), SWIGTYPE_p_lua_Debug.swigGetCPtr(ar), n));
  return ret;
}

string lua_getupvalue(SWIGTYPE_p_lua_State L, int funcindex, int n) {
  string ret = std.conv.to!string(lua_module_im.lua_getupvalue(SWIGTYPE_p_lua_State.swigGetCPtr(L), funcindex, n));
  return ret;
}

string lua_setupvalue(SWIGTYPE_p_lua_State L, int funcindex, int n) {
  string ret = std.conv.to!string(lua_module_im.lua_setupvalue(SWIGTYPE_p_lua_State.swigGetCPtr(L), funcindex, n));
  return ret;
}

void* lua_upvalueid(SWIGTYPE_p_lua_State L, int fidx, int n) {
  auto ret = cast(void*)lua_module_im.lua_upvalueid(SWIGTYPE_p_lua_State.swigGetCPtr(L), fidx, n);
  return ret;
}

void lua_upvaluejoin(SWIGTYPE_p_lua_State L, int fidx1, int n1, int fidx2, int n2) {
  lua_module_im.lua_upvaluejoin(SWIGTYPE_p_lua_State.swigGetCPtr(L), fidx1, n1, fidx2, n2);
}

int lua_sethook(SWIGTYPE_p_lua_State L, SWIGTYPE_p_f_p_lua_State_p_lua_Debug__void func, int mask, int count) {
  auto ret = lua_module_im.lua_sethook(SWIGTYPE_p_lua_State.swigGetCPtr(L), SWIGTYPE_p_f_p_lua_State_p_lua_Debug__void.swigGetCPtr(func), mask, count);
  return ret;
}

SWIGTYPE_p_f_p_lua_State_p_lua_Debug__void lua_gethook(SWIGTYPE_p_lua_State L) {
  void* cPtr = lua_module_im.lua_gethook(SWIGTYPE_p_lua_State.swigGetCPtr(L));
  SWIGTYPE_p_f_p_lua_State_p_lua_Debug__void ret = (cPtr is null) ? null : new SWIGTYPE_p_f_p_lua_State_p_lua_Debug__void(cPtr, false);
  return ret;
}

int lua_gethookmask(SWIGTYPE_p_lua_State L) {
  auto ret = lua_module_im.lua_gethookmask(SWIGTYPE_p_lua_State.swigGetCPtr(L));
  return ret;
}

int lua_gethookcount(SWIGTYPE_p_lua_State L) {
  auto ret = lua_module_im.lua_gethookcount(SWIGTYPE_p_lua_State.swigGetCPtr(L));
  return ret;
}

class lua_Debug {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(lua_Debug obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin lua_module_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          lua_module_im.delete_lua_Debug(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void event(int value) @property {
    lua_module_im.lua_Debug_event_set(cast(void*)swigCPtr, value);
  }

  public int event() @property const {
    auto ret = lua_module_im.lua_Debug_event_get(cast(void*)swigCPtr);
    return ret;
  }

  public void name(string value) @property {
    lua_module_im.lua_Debug_name_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string name() @property const {
    string ret = std.conv.to!string(lua_module_im.lua_Debug_name_get(cast(void*)swigCPtr));
    return ret;
  }

  public void namewhat(string value) @property {
    lua_module_im.lua_Debug_namewhat_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string namewhat() @property const {
    string ret = std.conv.to!string(lua_module_im.lua_Debug_namewhat_get(cast(void*)swigCPtr));
    return ret;
  }

  public void what(string value) @property {
    lua_module_im.lua_Debug_what_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string what() @property const {
    string ret = std.conv.to!string(lua_module_im.lua_Debug_what_get(cast(void*)swigCPtr));
    return ret;
  }

  public void source(string value) @property {
    lua_module_im.lua_Debug_source_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string source() @property const {
    string ret = std.conv.to!string(lua_module_im.lua_Debug_source_get(cast(void*)swigCPtr));
    return ret;
  }

  public void currentline(int value) @property {
    lua_module_im.lua_Debug_currentline_set(cast(void*)swigCPtr, value);
  }

  public int currentline() @property const {
    auto ret = lua_module_im.lua_Debug_currentline_get(cast(void*)swigCPtr);
    return ret;
  }

  public void linedefined(int value) @property {
    lua_module_im.lua_Debug_linedefined_set(cast(void*)swigCPtr, value);
  }

  public int linedefined() @property const {
    auto ret = lua_module_im.lua_Debug_linedefined_get(cast(void*)swigCPtr);
    return ret;
  }

  public void lastlinedefined(int value) @property {
    lua_module_im.lua_Debug_lastlinedefined_set(cast(void*)swigCPtr, value);
  }

  public int lastlinedefined() @property const {
    auto ret = lua_module_im.lua_Debug_lastlinedefined_get(cast(void*)swigCPtr);
    return ret;
  }

  public void nups(ubyte value) @property {
    lua_module_im.lua_Debug_nups_set(cast(void*)swigCPtr, value);
  }

  public ubyte nups() @property const {
    auto ret = lua_module_im.lua_Debug_nups_get(cast(void*)swigCPtr);
    return ret;
  }

  public void nparams(ubyte value) @property {
    lua_module_im.lua_Debug_nparams_set(cast(void*)swigCPtr, value);
  }

  public ubyte nparams() @property const {
    auto ret = lua_module_im.lua_Debug_nparams_get(cast(void*)swigCPtr);
    return ret;
  }

  public void isvararg(char value) @property {
    lua_module_im.lua_Debug_isvararg_set(cast(void*)swigCPtr, value);
  }

  public char isvararg() @property const {
    auto ret = lua_module_im.lua_Debug_isvararg_get(cast(void*)swigCPtr);
    return ret;
  }

  public void istailcall(char value) @property {
    lua_module_im.lua_Debug_istailcall_set(cast(void*)swigCPtr, value);
  }

  public char istailcall() @property const {
    auto ret = lua_module_im.lua_Debug_istailcall_get(cast(void*)swigCPtr);
    return ret;
  }

  public void short_src(string value) @property {
    lua_module_im.lua_Debug_short_src_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string short_src() @property const {
    string ret = std.conv.to!string(lua_module_im.lua_Debug_short_src_get(cast(void*)swigCPtr));
    return ret;
  }

  public void i_ci(SWIGTYPE_p_CallInfo value) @property {
    lua_module_im.lua_Debug_i_ci_set(cast(void*)swigCPtr, SWIGTYPE_p_CallInfo.swigGetCPtr(value));
  }

  public SWIGTYPE_p_CallInfo i_ci() @property const {
    void* cPtr = lua_module_im.lua_Debug_i_ci_get(cast(void*)swigCPtr);
    SWIGTYPE_p_CallInfo ret = (cPtr is null) ? null : new SWIGTYPE_p_CallInfo(cPtr, false);
    return ret;
  }

  public this() {
    this(lua_module_im.new_lua_Debug(), true);
  }
}

class SWIGTYPE_p_lua_State {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_lua_State obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin lua_module_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_f_p_lua_State_p_q_const__void_size_t_p_void__int {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_f_p_lua_State_p_q_const__void_size_t_p_void__int obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin lua_module_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_CallInfo {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_CallInfo obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin lua_module_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_va_list {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_va_list obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin lua_module_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_f_p_lua_State_p_void_p_size_t__p_char {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_f_p_lua_State_p_void_p_size_t__p_char obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin lua_module_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_lua_Debug {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_lua_Debug obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin lua_module_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_f_p_lua_State__int {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_f_p_lua_State__int obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin lua_module_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_ptrdiff_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_ptrdiff_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin lua_module_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_f_p_lua_State_p_lua_Debug__void {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_f_p_lua_State_p_lua_Debug__void obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin lua_module_im.SwigOperatorDefinitions;
}
